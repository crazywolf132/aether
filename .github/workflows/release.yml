name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Create Release
    runs-on: macos-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install conventional-changelog
        run: npm install -g conventional-changelog-cli

      - name: Get version
        id: get_version
        run: |
          VERSION=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        run: |
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0

      # Install the Apple certificate
      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ github.run_id }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Set key partition list (required for signing)
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Build app
        env:
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Update ExportOptions.plist with team ID
          /usr/libexec/PlistBuddy -c "Set :teamID $TEAM_ID" ExportOptions.plist
          
          xcodebuild -project Aether.xcodeproj \
            -scheme Aether \
            -configuration Release \
            -derivedDataPath build \
            -archivePath build/Aether.xcarchive \
            MACOSX_DEPLOYMENT_TARGET=11.0 \
            CODE_SIGN_IDENTITY="Developer ID Application" \
            CODE_SIGN_STYLE="Manual" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            archive

      - name: Create app bundle
        env:
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Update ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Set :method developer-id" ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Set :teamID $TEAM_ID" ExportOptions.plist
          
          xcodebuild -exportArchive \
            -archivePath build/Aether.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build/export

      - name: Create DMG
        run: |
          cd build/export
          # Create a temporary directory for DMG creation
          mkdir dmg_temp
          # Copy the app to the temporary directory
          cp -r Aether.app dmg_temp/
          # Create the DMG
          hdiutil create -volname "Aether" -srcfolder dmg_temp -ov -format UDZO ../Aether.dmg
          # Clean up
          rm -rf dmg_temp
          # Sign the DMG
          codesign --force --sign "Developer ID Application" --options runtime ../Aether.dmg

      - name: Notarize DMG
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Create temporary keychain for notarization
          xcrun notarytool store-credentials "notarytool-profile" \
            --apple-id "$APPLE_ID" \
            --team-id "$TEAM_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD"
          
          # Submit the DMG for notarization
          xcrun notarytool submit build/Aether.dmg \
            --keychain-profile "notarytool-profile" \
            --wait
          
          # Staple the notarization ticket to the DMG
          xcrun stapler staple build/Aether.dmg

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            build/Aether.dmg
            CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 